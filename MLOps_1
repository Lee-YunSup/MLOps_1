docker create nginx(이미지 이름) #nginx 이미지(디스크) 기반 컨테이너 생성
docker run nginx(이미지 이름) # 컨테이너 생성 및 시작
docker pull nginx:1.21 # nginx가 1.21인 이미지(디스크) 불러와짐

docker ps # 실행중인 컨테이너 상태 확인
docker ps -a # 전체 컨테이너 상태확인 
docker inspect [컨테이너 이름] # 컨테이너의 상세 정보를 확인

docker pause [컨테이너 이름] # 컨테이너 일시중지
docker unpause [컨테이너 이름] # 컨테이너 재개
docker stop [컨테이너 이름] # 컨테이너 종료
docker kill [컨테이너 이름] # 컨테이너 강제 종료
docker stop $(docker ps -a -q) # 모든 컨테이너 종
docker rm [컨테이너 이름] # 컨테이너 삭제 (컨테이너 중지 후 삭제해야함)
docker rm -f [컨테이너 이름] # 컨테이너 강제 종료 후 삭제
docker run --rm ... # 컨테이너 실행 종료 후 자동 삭제
docker container prune # 중지된 모든 컨테이너 삭제


----------------Entrypoint와 Command-------------------------
entrypoint와 command를 쓰는 이유 - 머신러닝 모델 소스코드를 entrypoint와 command를 주지 않으면 생성만 되지 실행이 안됨

docker run --entrypoint echo ubuntu hello ubuntu # hello ubuntu 출력하기

----------------환경 변수-------------------------
docker run -it -e MY_HOST=1.1.1.1 ubuntu bash
echo $MY_HOST # 환경 변수 설정 후 전달한 환경 변수 확인

-------------------------명령어 실행----------------------

docker run -d --name my-nginx nginx # 이름 지정해서 실행하기
docker exec - it my-nginx bash  # 컨테이너에 bash 셀로 접속하기
docker exec my-nginx env # 컨테이너 환경변수 확인하기 


-------------------Network-----------------------
docker run -d -p 8090:80 nginx # 8090 포트로 연결하기, 로컬 localhost:8090으로 연결 가능
docker run -d --expose 80 nginx # 단순 문서화 바인딩 안됨


------------------volume---------------------------
docker run -d -it -p 8090:80 --name my-nginx nginx:1.23 # 기본 접속 페이지 확인
docker run -d -p 8090:80 -v $(pwd)/html:/usr/share/nginx/html --name my-nginx nginx:1.23 # 마운트 할 디렉토리 생성
mount 해준 후 inspect를 통해 확인 가능
docker inspect my-nginx 
-------------------volume Container--------------------
 docker run -d --name my-volume -it -v $(pwd)/html:/usr/share/nginx/html ubuntu
docker run -d -p 8090:80 --name my-nginx --volumes-from my-volume nginx # my-volume 컨테이너의 볼륨 공유

-------------------Docer volume-----------------
docker volume create --name test-db
docker run -d --name my-sql3 -v test-db:/var/lib/mysql -p 3307:3307 --platform linux/amd64 -e MYSQL_ROOT_PASSWORD=12345 mysql:5.7
docker exec -it my-sql3 bash # sql을 사용 할 수 있다.


docker volume rm [볼륨 이름] # 볼륨 삭제







docker volume rm my-volume # 볼륨 제거하기 
docker run -d --name my-sql3 -v test-db:/var/lib/mysql -p 3307:3307 --platform linux/amd64 -e MYSQL_ROOT_PASSWORD=12345 mysql:5.7 # sql 만들기 
